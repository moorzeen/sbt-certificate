#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

(int, int, slice, slice, slice, cell, int) load_data() impure {
    slice ds = get_data().begin_parse();
    var (item_id, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        slice owner_address = ds~load_msg_addr();
        slice authority_address = ds~load_msg_addr();
        cell content = ds~load_ref();
        int revoked_at = ds~load_uint(64);
        return (-1, item_id, collection_address, owner_address, authority_address, content, revoked_at);
    } else {
        return (0, item_id, collection_address, null(), null(), null(), null());
    }
}

() store_data(int item_id, slice collection_address, slice owner_address, slice authority_address, cell content, int revoked_at) impure {
    set_data(
        begin_cell()
            .store_uint(item_id, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_slice(authority_address)
            .store_ref(content)
            .store_uint(revoked_at, 64)
            .end_cell()
    );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var body = begin_cell().store_uint(op, 32).store_uint(query_id, 64);
    if (~ builder_null?(payload)) {
        body = body.store_builder(payload);
    }

    var msg = begin_cell()
        .store_uint(flag, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(body.end_cell());

    send_raw_message(msg.end_cell(), send_mode);
}

(slice) content_dict_value(int key) impure inline {
    (_, _, _, _, _, cell content, _) = load_data();
    slice sc = content.begin_parse();
    sc~skip_bits(8);
    cell dict = sc~load_dict();
    (cell res, _) = dict.udict_get_ref?(256, key);
    slice val = res.begin_parse();
    val~skip_bits(8);
    return val;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();
    (int init?, int item_id, slice collection_address, slice owner_address, slice authority_address, cell content, int revoked_at) = load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));

        owner_address = in_msg_body~load_msg_addr();
        content = in_msg_body~load_ref();
        authority_address = in_msg_body~load_msg_addr();
        revoked_at = 0;

        store_data(item_id, collection_address, owner_address, authority_address, content, 0);
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (flags & 1) {
        ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof()) {
            int query_id = in_msg_body~load_uint(64);
            ;; mode 64 = carry all the remaining value of the inbound message
            send_msg(flag::regular(), owner_address, 0, op::ownership_proof_bounced(), query_id, null(), 64);
        }
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::request_owner()) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
            .store_uint(item_id, 256)
            .store_slice(sender_address)
            .store_slice(owner_address)
            .store_ref(body)
            .store_uint(revoked_at, 64)
            .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, msg, 64);
        return ();
    }

    if (op == op::prove_ownership()) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
            .store_uint(item_id, 256)
            .store_slice(owner_address)
            .store_ref(body)
            .store_uint(revoked_at, 64)
            .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, msg, 64);
        return ();
    }

    if (op == op::get_static_data()) {
        var msg = begin_cell().store_uint(item_id, 256).store_slice(collection_address);

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular(), sender_address, 0, op::report_static_data(), query_id, msg, 64);
        return ();
    }

    if (op == op::destroy()) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);

        owner_address = null_addr();
        authority_address = null_addr();
        store_data(item_id, collection_address, owner_address, authority_address, content, revoked_at);
        return ();
    }

    if (op == op::revoke()) {
        throw_unless(401, equal_slices(authority_address, sender_address));
        throw_unless(403, revoked_at == 0);

        store_data(item_id, collection_address, owner_address, collection_address, content, now());
        return ();
    }

    if (op == op::take_excess()) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        raw_reserve(min_tons_for_storage(), 0); ;; reserve amount for storage

        send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);
        return ();
    }

    if (op == op::edit_description()) {
        throw_unless(410, equal_slices(sender_address, authority_address));
        slice sc = content.begin_parse();
        sc~skip_bits(8);
        cell dict = sc~load_dict();
        dict~udict_set_ref( 256, "description"H, in_msg_body~load_ref());
        content = begin_cell().store_uint(0, 8).store_dict(dict).end_cell();
        store_data(item_id, collection_address, owner_address, authority_address, content, revoked_at);
        return ();
    }

    if (op == op::transfer()) {
        throw(403);
    }

    throw(0xffff);
}

;;  GET Methods

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int item_id, slice collection_address, slice owner_address, _, cell content, _) = load_data();
    return (init?, item_id, collection_address, owner_address, content);
}

slice get_authority_address() method_id {
    (_, _, _, _, slice authority_address, _, _) = load_data();
    return authority_address;
}

int get_revoked_time() method_id {
    (_, _, _, _, _, _, int revoked_at) = load_data();
    return revoked_at;
}

slice get_telegram_username() method_id {
    return content_dict_value("telegram_username"H);
}

slice get_cohort_number() method_id {
    return content_dict_value("cohort_number"H);
}